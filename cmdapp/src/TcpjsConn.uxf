<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=11
fontfamily=Monospaced //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>1560</w>
      <h>1550</h>
    </coordinates>
    <panel_attributes>TcpjsConn::root
--
TcpjsConnStartReq/ ^TcpjsConnStartCfm(STATE)
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>570</x>
      <y>70</y>
      <w>330</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>stopped
--
TcpjsConnStopReq/ ^TcpjsConnStopCfm(SUCCESS)
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>110</x>
      <y>510</y>
      <w>1330</w>
      <h>990</h>
    </coordinates>
    <panel_attributes>started
--


valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>380</x>
      <y>110</y>
      <w>210</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>190.0;10.0;10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>890</x>
      <y>110</y>
      <w>200</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>180.0;120.0;180.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1150</x>
      <y>430</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>TcpjsConnStopReq/ save req
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>410</x>
      <y>90</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>TcpjsConnStartReq/ save req
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>220</x>
      <y>230</y>
      <w>360</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>starting
--
entry/ ^^Done, startingTimer.start()
exit/ startingTimer.stop()
       

  
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>890</x>
      <y>230</y>
      <w>360</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>stopping
--
entry/ ^^Done
       stoppingTimer.start()
exit/ recall(), stoppingTimer.stop()

TcpjsConnStopReq/ defer(e)       
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1060</x>
      <y>390</y>
      <w>520</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>500.0;70.0;10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>370</x>
      <y>390</y>
      <w>30</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>380</x>
      <y>430</y>
      <w>220</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Done
/ ^TcpjsConnStartCfm(SUCCESS)
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1070</x>
      <y>160</y>
      <w>200</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Done/ ^TcpjsConnStopCfm(SUCCESS)
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>550</x>
      <y>590</y>
      <w>360</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>idle
--
entry/ sock = null, user = null,
       username = null
  
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>240</x>
      <y>800</y>
      <w>1050</w>
      <h>650</h>
    </coordinates>
    <panel_attributes>connected
--
entry/ error = null, savedLine = ''
       sock.on('data', 
         savedLine += buffer.toString(),
         while(savedLine contains a complete line)
           shift line from savedLine,
           msg = createMessageFromJson(line) 
           ^SockOnMessage(msg)
       sock.on('close', ^SockOnClose),
       sock.on("error", ^SockOnError)
SockOnError/ closeSock()
  
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>310</y>
      <w>340</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;320.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>640</x>
      <y>280</y>
      <w>180</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Fail, StartingTimer
/ ^TcpjsConnStartCfm(error)
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>690</x>
      <y>370</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=final</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>700</x>
      <y>370</y>
      <w>210</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>190.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>740</x>
      <y>340</y>
      <w>140</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Fail, StoppingTimer
/ assert
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>30</y>
      <w>90</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;
group=3</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>650</x>
      <y>30</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=initial
group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>550</y>
      <w>90</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;
group=4</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>650</x>
      <y>550</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=initial
group=4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>680</y>
      <w>30</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>450</x>
      <y>720</y>
      <w>190</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>TcpjsConnUseReq(sock)
/ save sock, user,
  ^TcpjsConnUseCfm
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>900</x>
      <y>630</y>
      <w>100</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>80.0;170.0;80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>920</x>
      <y>600</y>
      <w>330</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>SockOnClose
/ ^TcpjsConnDoneInd(error || NETWORK) to user
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>520</x>
      <y>950</y>
      <w>490</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>unauth
--
entry/ authTimer.start()
exit/ authTimer.stop()
AuthTimer/ error = TIMEOUT, closeSock()
SockOnMessage[SrvAuthReqMsg(credential)]
/ save reqMsg, ^CmdSrvAuthReq(credential)
CmdSrvAuthCfm
/ if (success) 
    save reqMsg.username, save assigned nodeId,
    sendCfmMsg(SrvAuthCfmMsg(SUCCESS)), ^^AuthDone,
  else
    sendCfmMsg(SrvAuthCfmMsg(FAIL)),  
    error = e.error,closeSock()
  
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>740</x>
      <y>1130</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>750</x>
      <y>1160</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>AuthDone
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>910</y>
      <w>90</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;
group=9</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>680</x>
      <y>910</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=initial
group=9</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>400</x>
      <y>1200</y>
      <w>730</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>authenticated
--
entry/ pingWaitTimer.start(periodic),
       pingCnt = 0
exit/ pingWaitTimer.stop()
PingWaitTimer[pingCnt&gt;0]/ pingCnt = 0
PingWaitTimer[pingCnt==0]/ error = TIMEOUT, closeSock()

TcpjsConnMsgReq(msg)/ postMsg(msg)
SockOnMessage(msg)/ if (msg == SrvPingReqMsg)
                      pingCnt++, sendCfmMsg(SrvPingCfmMsg)
                    else ^TcpjsConnMsgInd(msg) to user
  
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
